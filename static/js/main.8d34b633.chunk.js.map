{"version":3,"sources":["static/cloudy.svg","static/day.svg","static/cloudy-day-1.svg","static/cloudy-day-3.svg","static/rainy-1.svg","static/rainy-6.svg","static/snowy-1.svg","static/thunder.svg","features/weather/weatherSlice.js","features/weather/components/AddCity.js","features/weather/components/CityList.js","features/weather/components/CityDetails.js","features/weather/Dashboard.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","weatherSlice","createSlice","name","initialState","cities","addCityReq","city","refreshCityReq","getCityReq","reducers","addCity","state","action","findIndex","payload","error","unshift","length","pop","addCityPending","pending","addCityFailed","refreshCity","map","refreshCityPending","refreshCityFailed","removeCity","filter","getCity","current","find","list","shift","forecast","getCityPending","getCityFailed","actions","getCityAsync","dispatch","fetch","process","then","res","ok","Error","statusText","json","catch","e","message","AddCity","status","useSelector","weather","useDispatch","useState","setCity","Form","onSubmit","preventDefault","addCityAsync","InputGroup","className","FormControl","placeholder","aria-label","aria-describedby","onChange","target","value","Append","Button","variant","type","Spinner","animation","role","ListGroup","Item","key","onClick","K","main","temp","Math","round","icon","faSync","spin","refreshCityAsync","faTimes","getWeatherIcon","console","log","Number","replace","Day","FewClouds","ScatteredClouds","BrokenClouds","ShowerRain","Rain","Thunder","Snow","Cloudy","toCelsius","forecasts","currentWeather","Row","Col","sm","src","alt","width","wind","speed","deg","pressure","dt","Date","getDate","getDay","day","Dashboard","App","configureStore","reducer","weatherReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,gPCE9BC,EAAeC,YAAY,CACtCC,KAAM,UACNC,aAAc,CACZC,OAAQ,GACRC,WAAY,GACZC,KAAM,KACNC,eAAgB,GAChBC,WAAY,IAEdC,SAAU,CACRC,QAAS,SAACC,EAAOC,IACgE,IAAvED,EAAMP,OAAOS,WAAU,SAAAP,GAAI,OAAIA,EAAKJ,OAASU,EAAOE,QAAQZ,QAC9DS,EAAMN,WAAa,CAAEU,MAAO,gBAEhCJ,EAAMP,OAAOY,QAAQJ,EAAOE,SACxBH,EAAMP,OAAOa,OAAS,GAAGN,EAAMP,OAAOc,MAC1CP,EAAMN,WAAa,KAGvBc,eAAgB,SAACR,EAAOC,GACtBD,EAAMN,WAAa,CAAEe,SAAS,IAEhCC,cAAe,SAACV,EAAOC,GACrBD,EAAMN,WAAa,CAAEU,MAAOH,EAAOE,UAErCQ,YAAa,SAACX,EAAOC,GACnBD,EAAMP,OAASO,EAAMP,OAAOmB,KAAI,SAAAjB,GAAI,OAAIA,EAAKJ,OAASU,EAAOE,QAAQZ,KAAOU,EAAOE,QAAUR,YACtFK,EAAMJ,eAAeK,EAAOE,QAAQZ,OAE7CsB,mBAAoB,SAACb,EAAOL,GAC1BK,EAAMJ,eAAeD,GAAQ,CAAEc,SAAS,IAE1CK,kBAAmB,SAACd,EAAOC,GACzBD,EAAMJ,eAAeK,EAAOE,SAAW,CAAEC,OAAO,IAElDW,WAAY,SAACf,EAAOC,GAClBD,EAAMP,OAASO,EAAMP,OAAOuB,QAAO,SAAArB,GAAI,OAAIA,EAAKJ,OAASU,EAAOE,YAElEc,QAAS,SAACjB,EAAOC,GACf,IAAMiB,EAAUlB,EAAMP,OAAO0B,MAAK,SAAAxB,GAAI,OAAIA,EAAKJ,OAASU,EAAOE,QAAQR,KAAKJ,QACxE2B,GACFjB,EAAOE,QAAQiB,KAAKC,QACpBrB,EAAML,KAAO,CACX2B,SAAUrB,EAAOE,QACjBe,WAEFlB,EAAMH,WAAa,IAEnBG,EAAMH,WAAa,CAAEO,MAAO,wBAGhCmB,eAAgB,SAACvB,EAAOC,GACtBD,EAAMH,WAAa,CAAEY,SAAS,IAEhCe,cAAe,SAACxB,EAAOC,GACrBD,EAAMH,WAAa,CAAEO,MAAOH,EAAOE,a,EAOWd,EAAaoC,QAFzDjB,E,EAAAA,eAAgBE,E,EAAAA,cAAeX,E,EAAAA,QAC/Bc,E,EAAAA,mBAAoBC,E,EAAAA,kBAAmBH,E,EAAAA,YACvCY,E,EAAAA,eAAgBN,E,EAAAA,QAASO,E,EAAAA,cAKlBT,EAAe1B,EAAaoC,QAA5BV,WAwBFW,EAAe,SAAA/B,GAAI,OAAI,SAAAgC,GAClCA,EAASJ,KACTK,MAAM,2DAAD,OAA4DjC,EAA5D,wBAAgFkC,qCAAgCC,MAAK,SAAAC,GACxH,IAAKA,EAAIC,GACP,MAAM,IAAIC,MAAMF,EAAIG,YAEtB,OAAOH,EAAII,UACVL,MAAK,SAAAK,GACNR,EAASV,EAAQkB,OAChBC,OAAM,SAAAC,GAAC,OAAIV,EAASH,EAAca,EAAEC,eAQ1BjD,IAAf,QCnGe,SAASkD,IACtB,IAAMC,EAASC,aAAY,SAAAzC,GAAK,OAAIA,EAAM0C,QAAQhD,cAC5CiC,EAAWgB,cAFe,EAGRC,mBAAS,IAHD,mBAGzBjD,EAHyB,KAGnBkD,EAHmB,KAKhC,OACE,kBAACC,EAAA,EAAD,CAAMC,SAAU,SAAAV,GAAC,OAAKA,EAAEW,iBAAkBrB,EDsDlB,SAAAhC,GAAI,OAAI,SAAAgC,GAClCA,EAASnB,KACToB,MAAM,oDAAD,OAAqDjC,EAArD,kBAAmEkC,qCAAgCC,MAAK,SAAAC,GAC3G,IAAKA,EAAIC,GACP,MAAM,IAAIC,MAAMF,EAAIG,YAEtB,OAAOH,EAAII,UACVL,MAAK,SAAAK,GACNR,EAAS5B,EAAQoC,OAChBC,OAAM,SAAAC,GAAC,OAAIV,EAASjB,EAAc2B,EAAEC,cC/DcW,CAAatD,MAC9D,kBAACuD,EAAA,EAAD,CAAYC,UAAU,QACpB,kBAACC,EAAA,EAAD,CACEC,YAAY,YACZC,aAAW,WACXC,mBAAiB,eACjBC,SAAU,SAAAnB,GAAC,OAAIQ,EAAQR,EAAEoB,OAAOC,QAChCA,MAAO/D,IAET,kBAACuD,EAAA,EAAWS,OAAZ,KACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,oBAAoBC,KAAK,UAAzC,OAGFtB,EAAO/B,SAAW,kBAACsD,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,WACnDzB,EAAOpC,OAAS,yBAAK+C,UAAU,eAAeX,EAAOpC,Q,4BCtB9C,SAASmC,IACtB,IAAM9C,EAASgD,aAAY,SAAAzC,GAAK,OAAIA,EAAM0C,QAAQjD,UAC5C+C,EAASC,aAAY,SAAAzC,GAAK,OAAIA,EAAM0C,QAAQ9C,kBAC5C+B,EAAWgB,cACjB,OACE,sCACMlD,EAAOa,QAAU,mBACrB,kBAAC4D,EAAA,EAAD,KACEzE,EAAOmB,KAAI,SAAAjB,GAAI,OACjB,kBAACuE,EAAA,EAAUC,KAAX,CAAgBC,IAAKzE,EAAKJ,KAAM4D,UAAU,kCACxC,0BAAMkB,QAAS,kBAAM1C,EAASD,EAAa/B,EAAKJ,SAASI,EAAKJ,KAA9D,OAXW+E,EAWsE3E,EAAK4E,KAAKC,KAXjF,UAAUC,KAAKC,MAAkB,KAAXJ,EAAI,MAAc,IAAxC,MAWV,IAAmG3E,EAAK+C,QAAQ,GAAG6B,MACnH,8BACE,kBAAC,IAAD,CAAiBI,KAAMC,IAAQC,KAAMrC,EAAO7C,EAAKJ,OAASiD,EAAO7C,EAAKJ,MAAMkB,QAAU4D,QAAS,kBAAM1C,EF6D/E,SAAAhC,GAAI,OAAI,SAAAgC,GACtCA,EAASd,EAAmBlB,IAC5BiC,MAAM,oDAAD,OAAqDjC,EAArD,kBAAmEkC,qCAAgCC,MAAK,SAAAC,GAC3G,IAAKA,EAAIC,GACP,MAAM,IAAIC,MAAMF,EAAIG,YAEtB,OAAOH,EAAII,UACVL,MAAK,SAAAK,GACNR,EAAShB,EAAYwB,OACpBC,OAAM,SAAAC,GAAC,OAAIV,EAASb,EAAkBuB,EAAEC,cEtE2EwC,CAAiBnF,EAAKJ,QAAQ4D,UAAU,SACtJ,kBAAC,IAAD,CAAiBwB,KAAMI,IAASV,QAAS,kBAAM1C,EAASZ,EAAWpB,EAAKJ,YAdhE,IAAC+E,O,4ICSnB,SAASU,EAAeL,GAEtB,OADAM,QAAQC,IAAIC,OAAOR,EAAKS,QAAQ,QAAS,MACjCD,OAAOR,EAAKS,QAAQ,QAAS,MACnC,KAAK,EAAG,OAAOC,IACf,KAAK,EAAG,OAAOC,IACf,KAAK,EAAG,OAAOC,IACf,KAAK,EAAG,OAAOC,IACf,KAAK,EAAG,OAAOC,IACf,KAAK,GAAI,OAAOC,IAChB,KAAK,GAAI,OAAOC,IAChB,KAAK,GAAI,OAAOC,IAChB,KAAK,GAAI,OAAOC,IAChB,QAAS,OAAOR,KAGpB,IAAMS,EAAY,SAACxB,GAAD,gBAAUG,KAAKC,MAAkB,KAAXJ,EAAI,MAAc,IAAxC,MAGH,SAAS/B,KACtB,IAAM5C,EAAO8C,aAAY,SAAAzC,GAAK,OAAIA,EAAM0C,QAAQ/C,QAC1C6C,EAASC,aAAY,SAAAzC,GAAK,OAAIA,EAAM0C,QAAQ7C,cAC5C8B,EAAWgB,cACjB,IAAKhD,EAAM,OAAO,uEAClB,IAAMoG,EAAYpG,EAAK2B,SACjB0E,EAAiBrG,EAAKuB,QAC5B,OAAOsB,EAAO/B,QAAU,kBAACsD,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,WACvDzB,EAAOpC,MAAQ,6BAAMoC,EAAOpC,OAC1B,kBAAC6F,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIhD,UAAU,sCACrB,wBAAIA,UAAU,kBACX6C,EAAezG,MAElB,kBAAC,IAAD,CAAiBoF,KAAMC,IAAQP,QAAS,kBAAM1C,EAASD,EAAasE,EAAezG,QAAQsF,KAAMrC,EAAO/B,WAE1G,kBAACyF,EAAA,EAAD,CAAKC,GAAI,EAAGhD,UAAU,oDACpB,yBAAKiD,IAAKpB,EAAegB,EAAetD,QAAQ,GAAGiC,MAAO0B,IAAI,UAAUC,MAAM,SAEhF,kBAACJ,EAAA,EAAD,CAAKC,GAAI,EAAGhD,UAAU,kBACpB,6CAAmB2C,EAAUE,EAAezB,KAAKC,OACjD,6BAAMwB,EAAetD,QAAQ,GAAG6B,MAChC,sCAAYyB,EAAeO,KAAKC,MAAhC,MAA0CR,EAAeO,KAAKE,IAA9D,QACA,yCAAeT,EAAezB,KAAKmC,WAEpCX,EAAU3E,KAAKR,KAAI,SAAAU,GAAQ,OAAI,kBAAC4E,EAAA,EAAD,CAAKC,GAAI,EAAGhD,UAAU,cAAciB,IAAK9C,EAASqF,KA1BzEA,EA2BErF,EAASqF,GA3BH,IAAIC,KAAU,IAALD,GAAYE,WA2Bd,6BA5BjB,SAACF,GAAD,MAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,IAAIC,KAAU,IAALD,GAAYG,UA6BpFA,CAAOxF,EAASqF,IAAI,6BACrB,yBAAKP,IAAKpB,EAAe1D,EAASoB,QAAQ,GAAGiC,MAAO0B,IAAI,YAH1B,IAGuC,6BACpEP,EAAUxE,EAASkD,KAAKuC,KAAK,8BA9BxB,IAACJ,MC5BF,SAASK,KACtB,OACE,kBAACf,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGhD,UAAU,gBACpB,kBAACZ,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC2D,EAAA,EAAD,CAAKC,GAAI,GACP,kBAAC,GAAD,Q,YCCOc,OAVf,WACE,OACE,yBAAK9D,UAAU,OACb,4BAAQA,UAAU,wBAChB,kBAAC,GAAD,SCNO+D,eAAe,CAC5BC,QAAS,CACPzE,QAAS0E,KCOOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,IACf,kBAAC,GAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpG,MAAK,SAAAqG,GACjCA,EAAaC,kB","file":"static/js/main.8d34b633.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cloudy.9f4d5762.svg\";","module.exports = __webpack_public_path__ + \"static/media/day.539254f2.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy-day-1.0af35e78.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy-day-3.7fd0e682.svg\";","module.exports = __webpack_public_path__ + \"static/media/rainy-1.544c7ef4.svg\";","module.exports = __webpack_public_path__ + \"static/media/rainy-6.c13b9ec1.svg\";","module.exports = __webpack_public_path__ + \"static/media/snowy-1.c2d53a74.svg\";","module.exports = __webpack_public_path__ + \"static/media/thunder.d30350d8.svg\";","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const weatherSlice = createSlice({\r\n  name: 'weather',\r\n  initialState: {\r\n    cities: [],\r\n    addCityReq: {},\r\n    city: null,\r\n    refreshCityReq: {},   // this will be a store for each city hence it is an object\r\n    getCityReq: {},\r\n  },\r\n  reducers: {\r\n    addCity: (state, action) => {\r\n          if (state.cities.findIndex(city => city.name === action.payload.name) !== -1) {\r\n            state.addCityReq = { error: 'City Exists'}\r\n      } else {\r\n        state.cities.unshift(action.payload);\r\n        if (state.cities.length > 8) state.cities.pop();\r\n        state.addCityReq = {};  \r\n      }\r\n    },\r\n    addCityPending: (state, action) => {\r\n      state.addCityReq = { pending: true }\r\n    },\r\n    addCityFailed: (state, action) => {\r\n      state.addCityReq = { error: action.payload }\r\n    },\r\n    refreshCity: (state, action) => {\r\n      state.cities = state.cities.map(city => city.name === action.payload.name ? action.payload : city);\r\n      delete state.refreshCityReq[action.payload.name];\r\n    },\r\n    refreshCityPending: (state, city) => {\r\n      state.refreshCityReq[city] = { pending: true }\r\n    },\r\n    refreshCityFailed: (state, action) => {\r\n      state.refreshCityReq[action.payload] = { error: true }\r\n    },\r\n    removeCity: (state, action) => {\r\n      state.cities = state.cities.filter(city => city.name !== action.payload);\r\n    },\r\n    getCity: (state, action) => {\r\n      const current = state.cities.find(city => city.name === action.payload.city.name);\r\n      if (current) {\r\n        action.payload.list.shift()\r\n        state.city = {\r\n          forecast: action.payload,\r\n          current\r\n        }  \r\n        state.getCityReq = {};      \r\n      } else {\r\n        state.getCityReq = { error: 'City Does Not Exist' }\r\n      }\r\n    },\r\n    getCityPending: (state, action) => {\r\n      state.getCityReq = { pending: true };      \r\n    },\r\n    getCityFailed: (state, action) => {\r\n      state.getCityReq = { error: action.payload };      \r\n    },\r\n  },\r\n});\r\n\r\nconst { addCityPending, addCityFailed, addCity, \r\n        refreshCityPending, refreshCityFailed, refreshCity,\r\n        getCityPending, getCity, getCityFailed, } = weatherSlice.actions;\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const { removeCity } = weatherSlice.actions;\r\n\r\nexport const addCityAsync = city => dispatch => {\r\n  dispatch(addCityPending())\r\n  fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${process.env.REACT_APP_API_ID}`).then(res => {\r\n    if (!res.ok) {\r\n      throw new Error(res.statusText);\r\n    } \r\n    return res.json()\r\n  }).then(json => {\r\n    dispatch(addCity(json))    \r\n  }).catch(e => dispatch(addCityFailed(e.message)))\r\n};\r\nexport const refreshCityAsync = city => dispatch => {\r\n  dispatch(refreshCityPending(city))\r\n  fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${process.env.REACT_APP_API_ID}`).then(res => {\r\n    if (!res.ok) {\r\n      throw new Error(res.statusText);\r\n    }    \r\n    return res.json()\r\n  }).then(json => {\r\n    dispatch(refreshCity(json))\r\n  }).catch(e => dispatch(refreshCityFailed(e.message)))\r\n};\r\nexport const getCityAsync = city => dispatch => {\r\n  dispatch(getCityPending())\r\n  fetch(`http://api.openweathermap.org/data/2.5/forecast/daily?q=${city}&cnt=6&appid=${process.env.REACT_APP_API_ID}`).then(res => {\r\n    if (!res.ok) {\r\n      throw new Error(res.statusText);\r\n    }    \r\n    return res.json()\r\n  }).then(json => {\r\n    dispatch(getCity(json))    \r\n  }).catch(e => dispatch(getCityFailed(e.message)))\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.weather.value)`\r\n// export const selectCount = state => state.weather.value;\r\n\r\nexport default weatherSlice.reducer;\r\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/Button';\nimport Spinner from 'react-bootstrap/Spinner'\nimport {\n  addCityAsync, \n} from '../weatherSlice';\n\nexport default function AddCity() {\n  const status = useSelector(state => state.weather.addCityReq);\n  const dispatch = useDispatch();\n  const [city, setCity] = useState('');\n\n  return (\n    <Form onSubmit={e => (e.preventDefault(), dispatch(addCityAsync(city)))}>\n      <InputGroup className=\"mb-3\">\n        <FormControl\n          placeholder=\"Type City\"\n          aria-label=\"Add City\"\n          aria-describedby=\"basic-addon2\"\n          onChange={e => setCity(e.target.value)}\n          value={city}\n        />\n        <InputGroup.Append>\n          <Button variant=\"outline-secondary\" type=\"submit\">+</Button>\n        </InputGroup.Append>\n      </InputGroup>\n      { status.pending && <Spinner animation=\"border\" role=\"status\" /> }\n      { status.error && <div className=\"text-danger\">{status.error}</div> }\n    </Form>\n  );\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSync, faTimes } from '@fortawesome/free-solid-svg-icons'\nimport {\n  getCityAsync, refreshCityAsync, removeCity\n} from '../weatherSlice';\nconst toCelsius = (K) => `${Math.round((K - 273) * 100) / 100}C`\nexport default function AddCity() {\n  const cities = useSelector(state => state.weather.cities);\n  const status = useSelector(state => state.weather.refreshCityReq);\n  const dispatch = useDispatch();\n  return (\n    <>\n      { !!cities.length && 'Recent Locations' }\n      <ListGroup>\n      { cities.map(city => \n      <ListGroup.Item key={city.name} className=\"d-flex justify-content-between\">\n        <span onClick={() => dispatch(getCityAsync(city.name))}>{city.name} - {toCelsius(city.main.temp)} {city.weather[0].main}</span>\n        <span>\n          <FontAwesomeIcon icon={faSync} spin={status[city.name] && status[city.name].pending}  onClick={() => dispatch(refreshCityAsync(city.name))} className=\"mr-3\"/>\n          <FontAwesomeIcon icon={faTimes} onClick={() => dispatch(removeCity(city.name))}/>\n        </span>\n      </ListGroup.Item>)}\n      </ListGroup>      \n    </>\n  );\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Spinner from 'react-bootstrap/Spinner'\nimport Cloudy from '../../../static/cloudy.svg'\nimport FewClouds from '../../../static/cloudy-day-1.svg'\nimport ScatteredClouds from '../../../static/cloudy-day-3.svg'\nimport BrokenClouds from '../../../static/cloudy.svg'\nimport Day from '../../../static/day.svg'\nimport Rain from '../../../static/rainy-1.svg'\nimport ShowerRain from '../../../static/rainy-6.svg'\nimport Snow from '../../../static/snowy-1.svg'\nimport Thunder from '../../../static/thunder.svg'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSync } from '@fortawesome/free-solid-svg-icons'\nimport { getCityAsync } from '../weatherSlice';\nfunction getWeatherIcon(icon) {\n  console.log(Number(icon.replace(/[dn]/g, \"\")))\n  switch (Number(icon.replace(/[dn]/g, \"\"))) {\n    case 1: return Day;\n    case 2: return FewClouds;\n    case 3: return ScatteredClouds;\n    case 4: return BrokenClouds;\n    case 9: return ShowerRain;\n    case 10: return Rain;\n    case 11: return Thunder;\n    case 13: return Snow;\n    case 50: return Cloudy;\n    default: return Day;\n  }\n}\nconst toCelsius = (K) => `${Math.round((K - 273) * 100) / 100}C`\nconst getDay = (dt) => ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][(new Date(dt * 1000)).getDay()]\nconst getDate = (dt) => (new Date(dt * 1000)).getDate()\nexport default function AddCity() {\n  const city = useSelector(state => state.weather.city);\n  const status = useSelector(state => state.weather.getCityReq);\n  const dispatch = useDispatch();\n  if (!city) return <div>Click on Any City to Fetch the Details</div>\n  const forecasts = city.forecast;\n  const currentWeather = city.current;\n  return status.pending ? <Spinner animation=\"border\" role=\"status\" /> :\n    status.error ? <div>{status.error}</div> : (\n      <Row>\n        <Col sm={12} className=\"d-flex justify-content-between p-5\">\n          <h3 className=\"d-inline-block\">\n            {currentWeather.name}\n          </h3>\n          <FontAwesomeIcon icon={faSync} onClick={() => dispatch(getCityAsync(currentWeather.name))} spin={status.pending} />\n        </Col>\n        <Col sm={4} className=\"d-flex align-items-center justify-content-center\">\n          <img src={getWeatherIcon(currentWeather.weather[0].icon)} alt=\"weather\" width=\"150\" />\n        </Col>\n        <Col sm={8} className=\"text-left py-5\">\n          <div>Temperature: {toCelsius(currentWeather.main.temp)}</div>\n          <div>{currentWeather.weather[0].main}</div>\n          <div>Wind: {currentWeather.wind.speed}ms {currentWeather.wind.deg} deg</div>\n          <div>Pressure {currentWeather.main.pressure}</div>\n        </Col>\n        {forecasts.list.map(forecast => <Col sm={2} className=\"text-center\" key={forecast.dt}>\n          {getDate(forecast.dt)}<br />\n          {getDay(forecast.dt)}<br />\n          <img src={getWeatherIcon(forecast.weather[0].icon)} alt=\"weather\" /> <br />\n          {toCelsius(forecast.temp.day)}<br />\n        </Col>\n        )}\n      </Row>\n    );\n}\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport AddCity from './components/AddCity'\r\nimport CityList from './components/CityList'\r\nimport CityDetails from './components/CityDetails'\r\nexport default function Dashboard() {\r\n  return (\r\n    <Row>\r\n      <Col sm={4} className=\"border-right\">\r\n        <AddCity />\r\n        <CityList />\r\n      </Col>\r\n      <Col sm={8}>\r\n        <CityDetails />\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport WeatherDashboard from './features/weather/Dashboard';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"container-fluid py-5\">\r\n        <WeatherDashboard />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport weatherReducer from '../features/weather/weatherSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    weather: weatherReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}